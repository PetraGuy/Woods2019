setwd("C:/dev/code/Woods2019/code")
library(factoextra)
library(FactoMineR)
library(corrplot)
woods = read.csv("../data/woodprops.csv", stringsAsFactors = TRUE, header = TRUE)
ndep  = readRDS("../data/ndepbysite.RDS")
View(ndep)
woods  = cbind(woods,ndep[,4:6])
View(woods)
View(ndep)
#convert Ndep data to long lat and extract relevant data
setwd("C:/dev/code/Woods2019/code")
library(rgdal)
ndep = read.csv("../data/Ndep2014.csv",
stringsAsFactors = TRUE,
header = TRUE, skip = 6)
#coords <- cbind(Easting = as.numeric(as.character(ndep$Easting)),
#Northing = as.numeric(as.character(ndep$Northing)))
#creatre unique id for each row
ndep_ID =  1:nrow(ndep)
ndep = cbind(ndep_ID, ndep)
coords <- cbind(Easting = as.numeric(as.character(ndep$Easting)),
Northing = as.numeric(as.character(ndep$Northing)))
#create spatioal points dataframe
ndepSP = SpatialPointsDataFrame(coords,
data = data.frame(ndep$Value,ndep$ndep_ID),
proj4string = CRS("+init=epsg:27700"))
#convert to long lat
ndeplonglat = spTransform(ndepSP,  CRS("+proj=longlat +datum=WGS84"))
#change colnames
colnames(ndeplonglat@coords)[colnames(ndeplonglat@coords) == "Easting"] <- "Longitude"
colnames(ndeplonglat@coords)[colnames(ndeplonglat@coords) == "Northing"] <- "Latitude"
#take out long lat and ndep value in new df
ndeplonglatdf = as.data.frame(cbind(long = ndeplonglat@coords[,1],
lat = ndeplonglat@coords[,2],
ndep = ndeplonglat@data[,1]))
View(ndeplonglatdf)
#this file is sinle year values for total Ndep
ndepsingle = read.csv("../data/NdepTotal.csv",
stringsAsFactors = TRUE,
header = TRUE)
#this file is sinle year values for total Ndep
ndeptotal = read.csv("../data/NdepTotal.csv",
stringsAsFactors = TRUE,
header = TRUE)
ndepave = read.csv("../data/NdepB.csv",
stringsAsFactors = TRUE,
header = TRUE, skip = 19)
#there are some redundant cols, delete them
ndepave = ndepave[1:5]
#convert to long lat
#atkes df with col head of Easting and Northing and creates new cols of long lat
converttolonglat = function(df){
coords <- cbind(Easting = as.numeric(as.character(df$Easting)),
Northing = as.numeric(as.character(df$Northing)))
df_ID =  1:nrow(df)
df = cbind(df_ID, df)
#create spatial points dataframe
dfSP = SpatialPointsDataFrame(coords,
data = data.frame(df[1:3]),
proj4string = CRS("+init=epsg:27700"))
#convert to long lat
dflonglat = spTransform(dfSP,  CRS("+proj=longlat +datum=WGS84"))
#take out the converted longlats and bind to end of orginal df
df$long = dflonglat@coords[,"Easting"]
df$lat = dflonglat@coords[,"Northing"]
return(df)
}
ndeplonglat = converttolonglat(ndepave)
saveRDS(ndeplonglat,"../data/ndepavelonglat")
library(rgdal)
#this file is sinle year values for total Ndep
ndeptotal = read.csv("../data/NdepTotal.csv",
stringsAsFactors = TRUE,
header = TRUE)
View(ndeptotal)
#this file has 3 year aves for No2-No3. NH3-NH4 and SO2-SO3
ndepave = read.csv("../data/NdepB.csv",
stringsAsFactors = TRUE,
header = TRUE, skip = 19)
#this file has 3 year aves for No2-No3. NH3-NH4 and SO2-SO3
ndepave = read.csv("../data/NdepSep.csv",
stringsAsFactors = TRUE,
header = TRUE, skip = 19)
View(ndepave)
#this file has 3 year aves for No2-No3. NH3-NH4 and SO2-SO3
ndepave = read.csv("../data/NdepSep.csv",
stringsAsFactors = TRUE,
header = TRUE)
View(ndepave)
#this file has 3 year aves for No2-No3. NH3-NH4 and SO2-SO3
ndepsep = read.csv("../data/NdepSep.csv",
stringsAsFactors = TRUE,
header = TRUE)
View(ndepsep)
converttolonglat = function(df){
coords <- cbind(Easting = as.numeric(as.character(df$Easting)),
Northing = as.numeric(as.character(df$Northing)))
df_ID =  1:nrow(df)
df = cbind(df_ID, df)
#create spatial points dataframe
dfSP = SpatialPointsDataFrame(coords,
data = data.frame(df[1:3]),
proj4string = CRS("+init=epsg:27700"))
#convert to long lat
dflonglat = spTransform(dfSP,  CRS("+proj=longlat +datum=WGS84"))
#take out the converted longlats and bind to end of orginal df
df$long = dflonglat@coords[,"Easting"]
df$lat = dflonglat@coords[,"Northing"]
return(df)
}
ndeplonglat = converttolonglat(ndepsep)
ndepseplonglat = converttolonglat(ndepsep)
saveRDS(ndeplonglat,"../data/ndepseplonglat.RDS")
saveRDS(ndeplonglat,"../data/ndepseplonglat.RDS")
saveRDS(ndepseplonglat,"../data/ndepseplonglat.RDS")
ndepseplonglat = converttolonglat(ndepsep)
View(ndepseplonglat)
View(ndepseplonglat)
library(readxl)
elm = matrix(NA,6,69)
metdata = rep(list(elm),14)
for (l in 1:length(sheets)) {
metdata[[l]] = read_excel("../data/metofficelocations.xlsx",  sheet = sheets[l])
}
sheets = c("dunstaffnage","braemar","leuchars","paisley",
"newtonrigg","whitby","aberporth","suttonbon",
"cardiff","rossonwye","chivenor","yeovilton","heathrow",
"cambs")
for (l in 1:length(sheets)) {
metdata[[l]] = read_excel("../data/metofficelocations.xlsx",  sheet = sheets[l])
}
for (l in 1:length(sheets)) {
metdata[[l]] = read_excel("../data/metofficeclimate.xlsx",  sheet = sheets[l])
}
#calculate 5 year aves
aves = lapply(metdata,function(x) colMeans(x[,3:6], na.rm = TRUE) )
saveRDS(aves, "../data/5yearaves.RDS")
library(data.table)
#locations of my sites
mysites = data.table(read.csv("../data/woodslocs.csv", stringsAsFactors = TRUE, header = TRUE))
#df of data to be extracted
extractdata = data.table(readRDS("../data/ndepseplonglat"))
#df of data to be extracted
extractdata = data.table(readRDS("../data/ndepseplonglat.RDS"))
setkey(mysites,lat)
setkey(extractdata,lat)
extracted <- extractdata[mysites, roll = "nearest"]
saveRDS(extracted, "../data/ndepsepbysite.RDS")
saveRDS(extracted, "../data/ndepsepbysite.RDS")
#read in the data you want plotted
mapdata = readRDS("../data/ndepseplonglat")
#get average ndep for map colour
mid = mean(mapdata$NH3_NH4)
#get average ndep for map colour
mid = mean(mapdata$NH3_NH4)
#get average ndep for map colour
mid = mean(mapdata$NH3_NH4)
#read in the data you want plotted
mapdata = readRDS("../data/ndepseplonglat.RDS")
#get average ndep for map colour
mid = mean(mapdata$NH3_NH4)
#get a map of the UK
UKmap <- map_data(map = "world", region = "UK")
ggplot(data = UKmap, aes(x = long, y = lat, group = group)) +
geom_polygon(alpha = 0.5) +
scale_x_continuous(breaks = c(-6,-5,-4,-3,-2,-1,0,1),limits = c(-7,2))+
scale_y_continuous(breaks = c(50,51,52,53,54,55,56,57,58),limits = c(50,59))+
coord_map()+
#put in datafile containg colnames long lat and give solor the colname of varible to map
geom_point(data = mapdata, mapping = aes(x = long, y = lat, color = NH3_NH4), inherit.aes = FALSE)+
theme(plot.margin=unit(c(0,0,0,0),"mm"))+
#mid calculated above is mean of the data you are plotting. remove this for points
scale_color_gradient2(midpoint=mid, low="blue", mid="white",
high="red", space ="Lab" )
woods = read.csv("../data/woodprops.csv", stringsAsFactors = TRUE, header = TRUE)
ndep  = readRDS("../data/ndepsepbysite.RDS")
woods  = cbind(woods,ndep[,4:6])
View(ndep)
View(woods)
woods_soil = woods[c(4,5,9:15)]
#do separate PCA
woods_soilPCA = PCA(woods_soil[-1],graph = FALSE)
View(woods_soil)
View(woods_soil)
View(woods_soil)
woods_soil = woods[c(5,6,10,11,12,13,16,17,18)]
#do separate PCA
woods_soilPCA = PCA(woods_soil[-1],graph = FALSE)
fviz_pca_biplot(woods_soilPCA,
col.ind = woods_soil$type,
palette = c("red", "green", "purple", "blue",
"black", "orange"),
fill.ind = woods_soil$type,
col.var = "black", repel = TRUE,
legend.title = "soil type")+
scale_shape_manual(values = c(15,16,17,18,19,25))
var = get_pca_var(woods_soilPCA)
corrplot(var$cos2)
woodscontvars = cor(as.matrix(woods[,5:12]))
corrplot(woodscontvars,type = "lower", order = "hclust", diag = FALSE)
woods = read.csv("../data/woodprops.csv", stringsAsFactors = TRUE, header = TRUE)
View(woods)
View(woods)
#compute gower distance
gower_dist = daisy(woods[,-c(1:5)],
type = list(nominal = c(1,2,3,4)),
metric = "gower",
stand = TRUE)
library(cluster) #for gower distance
library(dplyr)
library(Rtsne)
library(ggplot2)
library(factoextra)
library(Gifi)
library(ggfortify)
library(FactoMineR)
#compute gower distance
gower_dist = daisy(woods[,-c(1:5)],
type = list(nominal = c(1,2,3,4)),
metric = "gower",
stand = TRUE)
gower_mat = as.matrix(gower_dist)
#add rownames so plat has labels
rownames(gower_mat) = woods$site
# most similar pair
woods[which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
arr.ind = TRUE)[1, ], ]
#most dissimilar
woods[which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]),
arr.ind = TRUE)[1, ], ]
sil_width = c(NA)
for (i in 2:19) {
pam_fit = pam(gower_dist,
diss = TRUE,
k=i)
sil_width[i] = pam_fit$silinfo$avg.width
}
plot(2:19, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(2:19, sil_width)
axis(side = 1,at = c(2:19))
#cluster using any other method and plot results
woods.clust =eclust(gower_mat,"pam",k = 13,stand = TRUE)
#plot the groups
#fviz_cluster(woods.clust, repel = TRUE,geom = "text")
fviz_silhouette(woods.clust)
